"use strict";
(self["webpackChunktheme"] = self["webpackChunktheme"] || []).push([["CopyToClipClick"],{

/***/ "./src/js/components/CopyToClipClick.js":
/*!**********************************************!*\
  !*** ./src/js/components/CopyToClipClick.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CopyToClipClick)
/* harmony export */ });
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var CopyToClipClick = /*#__PURE__*/_createClass(function CopyToClipClick() {
  var _this = this;
  _classCallCheck(this, CopyToClipClick);
  _defineProperty(this, "init", function () {
    var copyShareButton = document.querySelector(_this.copyShareButton);
    if (copyShareButton) {
      copyShareButton.addEventListener("click", _this.copyShareInit);
    }
  });
  _defineProperty(this, "copyShareInit", function () {
    var pageLink = window.location.href;
    if (navigator.share) {
      navigator.share({
        url: pageLink // The URL to share
      }).then(function () {
        //console.log('Share successful');
      })["catch"](function (error) {
        console.error("Share failed:", error);
        _this.copyToClipboard(pageLink);
      });
    } else {
      _this.copyToClipboard(pageLink);
    }
  });
  _defineProperty(this, "copyToClipboard", function (text) {
    var message = "Link copied to clipboard successfully.";
    console.log(message);
    var tempInput = document.createElement("input");
    var tempMessageBar = document.createElement("div");
    tempInput.setAttribute("value", text);
    tempMessageBar.textContent = message;
    tempMessageBar.classList.add("toast-message");
    document.body.appendChild(tempInput);
    document.body.appendChild(tempMessageBar);
    tempInput.select();
    document.execCommand("copy");
    document.body.removeChild(tempInput);
    setTimeout(function () {
      document.body.removeChild(tempMessageBar);
    }, 2000);
  });
  this.copyShareButton = ".js-copy-clipboard";
  this.init();
});


/***/ })

}]);
//# sourceMappingURL=CopyToClipClick-1.8.min.js.map